#!/usr/bin/env python

import sys, socket, select, time, json, random

# node types
FOLLOWER = 'follower'
CANDIDATE = 'candidate'
LEADER = 'leader'

# RCP types
REQUEST_VOTE = 'requestVote'
VOTE = 'vote'
APPEND_ENTRY = 'appendEntry'
ACCEPT_APPEND_ENTRY = 'acceptAppendEntry'
REJECT_APPEND_ENTRY = 'rejectAppendEntry'
HEARTBEAT_TIME = .025
STALENESS_THRESHOLD = .1

myNodeType = FOLLOWER
electionTimeout = float(random.randint(150, 300)) / 1000
currentTerm = 0
votedFor = None
myVotes = 1
LEADER_UNKNOWN = 'FFFF'
leader = LEADER_UNKNOWN

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

nextIdx = {}
matchIdx = {}

candidateQueue = []
timeSinceHeartbeatResponse = {}

# number of nodes needed for majority
majority = int((len(replica_ids) + 1) / 2) + 1

database = {}
log = []
putInfo = []
commitIdx = 0
lastApplied = -1

lastHeartbeat = time.time()

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

messageCount = 0
def generateMID():
	global messageCount
	messageCount += 1
	return str(my_id) + str(messageCount)

def sendMessage(msg):
	sock.send(json.dumps(msg))

def handleRequestVote(msg):
	global leader, votedFor
	if currentTerm  <=  msg['term'] and not votedFor:
		if len(log) == 0 or (msg['lastLogIdx'] >= len(log) - 1 and msg['lastLogTerm'] >= log[len(log) - 1][0]):
			# vote for them!
			myNodeType = FOLLOWER
			leader = LEADER_UNKNOWN
			votedFor = msg['candidateId']
			response = {'src': my_id, 'dst': msg['src'], 'leader': LEADER_UNKNOWN, 'type': VOTE, 'term': msg['term'], 'candidateId': votedFor, 'MID': msg['MID']}
			sendMessage(response)

def handleAppendEntry(msg):
	global commitIdx, log, lastApplied
	if msg['term'] < currentTerm or ('prevLogIdx' in msg and (msg['prevLogIdx'] in log and log[msg['prevLogIdx']][0] != msg['prevLogTerm'])):		
		response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'term': currentTerm, 'type': REJECT_APPEND_ENTRY, 'MID': msg['MID']}
		sendMessage(response)
	else:
		resetFollower(msg)
		if msg['commitIdx'] > commitIdx:
			commitIdx = min(msg['commitIdx'], len(log) - 1)
		if 'entries' in msg:
			entries = msg['entries']
			if msg['logLen'] - len(entries) > len(log):
				response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': REJECT_APPEND_ENTRY, 'MID': msg['MID']}
				sendMessage(response)
			for i in range(len(entries)):
				entry = entries[i]
				entryIdx = msg['logLen'] - len(entries) + i 
				if len(log) > entryIdx:
					if entry[0] != log[entryIdx][0]:
						log = log[:entryIdx]
						lastApplied = entryIdx - 1
						response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': REJECT_APPEND_ENTRY, 'MID': msg['MID']}
						sendMessage(response)
						return
					else:
						continue
				# append any new entries to log
				log.append(entry)
		replyAppendEntrySuccess(msg)

def replyAppendEntrySuccess(msg):
	response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': ACCEPT_APPEND_ENTRY, 'MID': msg['MID'], 'commitIdx': commitIdx, 'logLen': len(log)}
	sendMessage(response)

def handleAcceptAppendEntry(msg):
	id = msg['src']
	nextIdx[id] = msg['logLen']
	matchIdx[id] = msg['logLen'] - 1
	updateCommitIndex(matchIdx[id])
	timeSinceHeartbeatResponse[msg['src']] = time.time()

def updateCommitIndex(logIdx):
	global commitIdx
	count = 1
	for id in replica_ids:
		if matchIdx[id] >= logIdx:
			count += 1
	if count >= majority and logIdx > commitIdx:
		commitIdx = logIdx

def handleRejectAppendEntry(msg):
	id = msg['src']
	if nextIdx[id] > 0:
		nextIdx[id] = nextIdx[id] - 1
		prevLogIdx = nextIdx[id] - 1
		prevLogTerm = -1 #default value for if prevLogIdx is invalid
		if prevLogIdx in log:
			prevLogTerm = log[nextIdx[id] - 1][0]
		entries = log[nextIdx[id]:min(len(log), nextIdx[id] + 10)]
		response = {'src': my_id, 'dst': id, 'leader': my_id, 'type': APPEND_ENTRY, 'MID': generateMID(), 'entries': entries, 'logLen': min(len(log), nextIdx[id] + 10), 'term': currentTerm, 'commitIdx': commitIdx, 'prevLogIdx': prevLogIdx, 'prevLogTerm': prevLogTerm}
		sendMessage(response)
	timeSinceHeartbeatResponse[msg['src']] = time.time()

def resetFollower(msg):
	global candidateQueue, leader, myNodeType, currentTerm, votedFor, myVotes
	leader = msg['leader']
	myNodeType = FOLLOWER
	currentTerm = msg['term']
	votedFor = None
	myVotes = 1
	for msg in candidateQueue:
                redirect(msg)
        candidateQueue = []
	
def handleVote(msg):
	global myVotes
	if msg['term'] == currentTerm:
		myVotes += 1
		if myVotes >= majority:
			becomeLeader()


def becomeLeader():
	global leader, myNodeType, electionTimeout, votedFor, myVotes, nextIdx, matchIdx
	myNodeType = LEADER
	electionTimeout = random.randint(150,300) / 1000
	votedFor = None
	leader = my_id
	myVotes = 1
	sendHeartbeat()
	for id in replica_ids:
		nextIdx[id] = commitIdx + 1
		matchIdx[id] = 0

def sendHeartbeat():
	global lastHeartbeat
	for id in replica_ids:
		msg = {'src': my_id, 'dst': id, 'leader': my_id, 'type': APPEND_ENTRY, 'term': currentTerm, 'MID': generateMID(), 'commitIdx': commitIdx}
		sendMessage(msg)

def handlePut(msg):
	if myNodeType == LEADER:
		log.append((currentTerm, (msg['key'], msg['value']), msg['src'], msg['MID']))
		notifyFollowersOfPut()
	else:
                if not checkInCandidateQueue(msg):
                        candidateQueue.append(msg)
def checkInCandidateQueue(msg):
	if 'value' in msg:
		for message in candidateQueue:
        		if message['key'] == msg['key'] and 'value' in message and message['value'] == msg['value']:
                		return True
        	return False
	else:
		for message in candidateQueue:
                        if message['key'] == msg['key'] and 'value' not in message:
                                return True
                return False
def notifyFollowersOfPut():
	for id in replica_ids:
                prevLogIdx = nextIdx[id] - 1
                prevLogTerm = -1 #default value for if prevLogIdx is invalid
                if prevLogIdx in log:
                        prevLogTerm = log[nextIdx[id] - 1][0]
                entries = log[nextIdx[id]:min(len(log), nextIdx[id] + 10)]
                response = {'src': my_id, 'dst': id, 'leader': my_id, 'type': APPEND_ENTRY, 'MID': generateMID(), 'entries': entries, 'logLen': min(len(log), nextIdx[id] + 10), 'term': currentTerm, 'commitIdx': commitIdx, 'prevLogIdx': prevLogIdx, 'prevLogTerm': prevLogTerm}
                sendMessage(response)

def handleGet(msg):
	if myNodeType == LEADER:
		recentResponses = 1
		for key in timeSinceHeartbeatResponse:
			if time.time() - timeSinceHeartbeatResponse[key] < STALENESS_THRESHOLD:
				recentResponses += 1
		#if recentResponses >= majority:
		value = ''
		if msg['key'] in database:
			value = database[msg['key']]
		response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'ok','MID': msg['MID'], 'value': value}
		sendMessage(response)
		#else:
			#redirectGet(msg)
	else:
		if not checkInCandidateQueue(msg):
                        candidateQueue.append(msg)

def redirectGet(msg):
	response = {'src': my_id, 'dst': msg['src'], 'leader': LEADER_UNKNOWN, 'type': 'redirect','MID': msg['MID']}
        sendMessage(response)

def redirect(msg):
	response = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'redirect', 'MID': msg['MID']}
	sendMessage(response)

def commitIfNecessary():
	global lastApplied, commitIdx
	commitIdx = min(commitIdx, len(log) - 1)
	if commitIdx > lastApplied and len(log) > 0:
		entry = log[lastApplied + 1]
		database[entry[1][0]] = entry[1][1]
		if myNodeType == LEADER:
			response = {'src': my_id, 'dst': entry[2], 'leader': leader, 'type': 'ok', 'MID': entry[3]}
			sendMessage(response)
		lastApplied += 1

last = time.time()
while True:
	ready = select.select([sock], [], [], 0.1)[0]	
	if sock in ready:
		msg_raw = sock.recv(32768)
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		if msg['src'] in replica_ids:
			last = time.time()
		if 'term' in msg and msg['term'] > currentTerm:
			currentTerm = msg['term']
			myNodeType = FOLLOWER
			leader = LEADER_UNKNOWN
			votedFor = None
		if msg['type'] == 'get':
			handleGet(msg)
		elif msg['type'] == 'put':
			handlePut(msg)
		elif msg['type'] == REQUEST_VOTE:
			handleRequestVote(msg)
		elif msg['type'] == VOTE:
			if not myNodeType == LEADER: handleVote(msg)
		elif msg['type'] == APPEND_ENTRY:
			handleAppendEntry(msg)
		elif msg['type'] == ACCEPT_APPEND_ENTRY:
			handleAcceptAppendEntry(msg)
		elif msg['type'] == REJECT_APPEND_ENTRY:
			handleRejectAppendEntry(msg)

	if myNodeType == LEADER:
		if time.time() - lastHeartbeat > HEARTBEAT_TIME:
			if len(log) > 0:
				notifyFollowersOfPut()
			else:
				sendHeartbeat()
			lastHeartbeat = time.time()
	else:
		clock = time.time()
		if clock - last > electionTimeout:
			leader = LEADER_UNKNOWN
			electionTimeout = float(random.randint(150, 300)) / 1000
			currentTerm += 1
			myNodeType = CANDIDATE
			votedFor = my_id
			myVotes = 1
			# issue RequestVote RPCs to each of the other servers in the cluster
			lastLogTerm = -1
			if len(log) > 0:
				lastLogTerm = log[len(log) - 1][0]
			for id in replica_ids:
				msg = {'src': my_id, 'dst': id, 'leader': LEADER_UNKNOWN, 'type': REQUEST_VOTE, 'term': currentTerm, 'candidateId': my_id, 'MID': generateMID(), 'lastLogIdx': len(log) - 1, 'lastLogTerm': lastLogTerm}
				sendMessage(msg)
			last = time.time()
	commitIfNecessary()
